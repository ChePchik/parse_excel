const XLSX = require("xlsx");
const fs = require("fs");

// –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É Excel-—Ñ–∞–π–ª—É
const filePath = "example.xlsx";

try {
	if (!fs.existsSync(filePath)) {
		console.error("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.");
		throw new Error("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.");
	}
	// –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
	const workbook = XLSX.readFile(filePath);
	console.log("üöÄ ~ workbook:", workbook);
	// –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç –∏–∑ –∫–Ω–∏–≥–∏
	const sheetName = workbook.SheetNames[0];
	if (!sheetName) {
		console.error("–õ–∏—Å—Ç –≤ —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
		throw new Error("–õ–∏—Å—Ç –≤ —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
	}

	const sheet = workbook.Sheets[sheetName];
	// console.log("üöÄ ~ sheet:", sheet);

	// –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
	let rowIndex = 2;
	// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	const typeQu = {
		"–Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤": "checkbox",
		"–æ–¥–∏–Ω –æ—Ç–≤–µ—Ç": "radio",
		"—Ç–µ–∫—Å—Ç–æ–≤–æ–π –æ—Ç–≤–µ—Ç": "text",
	};
	// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	const questions = [];

	// –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫
	const allowedCharsRegex = /^[a-zA-Z–∞-—è—ë–ê-–Ø–Å0-9,.\-!?'" ]{1,60}$/;
	const allowedTypes = ["–æ–¥–∏–Ω –æ—Ç–≤–µ—Ç", "–Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤", "—Ç–µ–∫—Å—Ç–æ–≤–æ–π –æ—Ç–≤–µ—Ç"];
	const allowedGValuesRegex = /^[1-4](,[1-4]){0,3}$/;

	// –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ–º –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
	while (sheet["A" + rowIndex]) {
		const questionData = {
			type: "radio", // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –º–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã
			question: "",
			answers: [],
		};
		let type_answers = null;

		// –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ A1:H1
		for (let col = "A".charCodeAt(0); col <= "H".charCodeAt(0); col++) {
			const cellAddress = String.fromCharCode(col) + rowIndex;
			// const cellValue = sheet[cellAddress] ? sheet[cellAddress].v : "";
			const cellValue = sheet[cellAddress] ? String(sheet[cellAddress].v).trim() : "";

			// –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤ A, C, D, E, F
			if (
				["A", "C"].includes(String.fromCharCode(col)) ||
				(["D", "E", "F"].includes(String.fromCharCode(col)) && cellValue !== "")
			) {
				if (!allowedCharsRegex.test(cellValue)) {
					console.error(
						`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ –¥–ª–∏–Ω–∞ –≤ —Å—Ç–æ–ª–±—Ü–µ ${String.fromCharCode(
							col,
						)} –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${rowIndex}.`,
					);
					throw new Error(
						`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ –¥–ª–∏–Ω–∞ –≤ —Å—Ç–æ–ª–±—Ü–µ ${String.fromCharCode(
							col,
						)} –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${rowIndex}.`,
					);
				}
			}
			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö: –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è –Ω–µ –ø—É—Å—Ç—ã
			if (
				(col === "A".charCodeAt(0) ||
					col === "B".charCodeAt(0) ||
					col === "C".charCodeAt(0) ||
					col === "G".charCodeAt(0)) &&
				!cellValue?.trim()
			) {
				console.error(
					`–ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ–º —Å—Ç–æ–ª–±—Ü–µ ${String.fromCharCode(
						col,
					)} –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${rowIndex}.`,
				);
				throw new Error(
					`–ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ–º —Å—Ç–æ–ª–±—Ü–µ ${String.fromCharCode(
						col,
					)} –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${rowIndex}.`,
				);
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –≤ –æ–±—ä–µ–∫—Ç–µ questionData
			switch (col) {
				case "A".charCodeAt(0):
					questionData.question = cellValue;
					break;
				case "B".charCodeAt(0):
					if (!allowedTypes.includes(cellValue.toLowerCase())) {
						console.error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–æ–ª–±—Ü–µ B –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${rowIndex}.`);
						throw new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–æ–ª–±—Ü–µ B –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${rowIndex}.`);
					}
					questionData.type = typeQu[cellValue.toLowerCase()]; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
					type_answers = typeQu[cellValue.toLowerCase()];
					console.log("üöÄ ~ type_answers:", type_answers);
					break;
				case "C".charCodeAt(0):
					if (type_answers == "text") {
						questionData.answers.push({
							text: cellValue,
							right: cellValue,
						});
						break;
					}

				case "D".charCodeAt(0):
					if (type_answers == "text") break;
				case "E".charCodeAt(0):
					if (type_answers == "text") break;
				case "F".charCodeAt(0):
					if (type_answers == "text") break;
					questionData.answers.push({
						text: cellValue,
						right: "false",
					});
					break;
				case "G".charCodeAt(0):
					if (type_answers == "text") break;
					if (!allowedGValuesRegex.test(cellValue)) {
						console.error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–æ–ª–±—Ü–µ G –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${rowIndex}.`);
						throw new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–æ–ª–±—Ü–µ G –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${rowIndex}.`);
					}
					let answerIndices = [];

					// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ G —Å—Ç—Ä–æ–∫–æ–π
					if (typeof cellValue === "string") {
						// –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –º–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤
						answerIndices = cellValue
							.split(",")
							.map((answerIndex) => parseInt(answerIndex.trim()) - 1);
					} else if (!isNaN(cellValue)) {
						// –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ G —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º (–æ–¥–∏–Ω–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç)
						answerIndices = [parseInt(cellValue) - 1];
					}

					// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "true" –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ –æ—Ç–≤–µ—Ç–æ–≤
					answerIndices.forEach((answerIndex) => {
						if (questionData.answers[answerIndex]) {
							questionData.answers[answerIndex].right = "true";
						}
					});
					break;
			}
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç questionData –≤ –º–∞—Å—Å–∏–≤ questions
		questions.push(questionData);

		// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
		rowIndex++;
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
	const outputData = { questions };
	const outputFilePath = "output.json";

	fs.writeFileSync(outputFilePath, JSON.stringify(outputData, null, 2));

	console.log(`–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: ${outputFilePath}`);
} catch (error) {
	console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:", error);
	fs.close();
}
